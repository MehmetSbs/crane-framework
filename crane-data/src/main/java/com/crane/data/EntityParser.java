package com.crane.data;

import com.crane.data.annotation.AutoGenerated;
import com.crane.data.annotation.Column;
import com.crane.data.annotation.Entity;
import com.crane.data.annotation.Id;
import java.lang.reflect.Field;
import java.util.*;

public class EntityParser {

  public static <T> EntityMeta<T> parse(Class<T> clazz) {
    if (!clazz.isAnnotationPresent(Entity.class)) {
      throw new IllegalArgumentException("Class " + clazz.getName() + " is missing @Entity annotation");
    }

    Entity entityAnnotation = clazz.getAnnotation(Entity.class);
    String tableName = entityAnnotation.table().isEmpty()
        ? clazz.getSimpleName().toLowerCase()
        : entityAnnotation.table();

    String idFieldName = null;
    List<String> columns = new ArrayList<>();
    Map<String, Field> fieldMap = new HashMap<>();
    Set<String> autoGeneratedFields = new HashSet<>();

    for (Field field : clazz.getDeclaredFields()) {
      field.setAccessible(true);

      String columnName = field.getName();
      if (field.isAnnotationPresent(Column.class)) {
        String customName = field.getAnnotation(Column.class).name();
        if (!customName.isEmpty()) {
          columnName = customName;
        }
      }else {
        columnName = camelToSnake(columnName);
      }

      columns.add(columnName);
      fieldMap.put(columnName, field);

      if (field.isAnnotationPresent(Id.class)) {
        idFieldName = columnName;
      }

      if (field.isAnnotationPresent(AutoGenerated.class)) {
        autoGeneratedFields.add(columnName);
      }
    }

    if (idFieldName == null) {
      throw new IllegalArgumentException("Class " + clazz.getName() + " is missing a field annotated with @Id");
    }

    return new EntityMeta<>(clazz, tableName, idFieldName, columns, fieldMap, autoGeneratedFields);
  }

  public static String camelToSnake(String input) {
    if (input == null || input.isEmpty()) {
      return input;
    }
    return input
        .replaceAll("([a-z])([A-Z])", "$1_$2") // insert _ between lower and upper
        .replaceAll("([A-Z])([A-Z][a-z])", "$1_$2") // handle ABBreaks
        .toLowerCase();
  }

}

